1. Cayley's Formulas Globalised Version is : k * n ^ (n - k - 1)
   where, k : number of connected components in forest,
          n : number of vertices

2. MST Can Be Obtained By : 
	i. Krushkal
	ii. Prim
		  * faster than krushkal if graph is dense enough
	iii. Boruvka 
		  * faster randomized algorithm that works in linear time O(E)
		  * oldest minimum spanning tree algorithm
	iv. Reverse-Delete-Algorithm (almost reverse of krushkal)

3. Diophantine Equation : 
	Note : g = gcd(A, B)
    i. Ax + By = C have infinite solutions, iff g | C (read : g devides C), Here x or y Any/Both can be Negative
    ii. Ax' + By' = g
    	where, we can find x' and y' using extended euclidian algorithm
    iii. solution for our equation is,
    		(x, y) = ((x' * C + i * B) / g, (y' * C - i * A) / g)
    			{i is integer, by changing it, we can get all solutions}

// Remaining, Not studied perfectly...
4. Chicken Mc-nugget Theorem : 
	Ref. Link : https://brilliant.org/wiki/postage-stamp-problem-chicken-mcnugget-theorem/
	Ref. Link : https://discuss.codechef.com/t/givcandy-editorial/12628 (bezout's identity, but explanation to make x and y positive)

5. Fibonacci numbers : 
	i. fib(2 * k) = fib(k) * fib(k) + fib(k - 1) * fib(k - 1)
	ii. fib(2 * k + 1) = fib(k) * fib(k + 1) + fib(k - 1) * fib(k)
	
	Code :
			/****
			  ** Time Complexity : O(logn * loglogn)
			  ** Space Complexity : O(Recursion Stack + apprx. logn * loglogn)
			****/
			
			map<int, int> mp;
			int fib(int n)
			{
				// base case
				if(n <= 3) return max(1LL, n);

				// ignoring overlapping sub-structure
				if(mp.count(n)) return mp[n];

				if(n % 2)
				{
					// fib(2 * k) case
					int a = fib(n / 2);
					int b = fib(n / 2 - 1);
					return a * a + b * b;
				}

				// fib(2 * k + 1) case
				return fib((n - 1) / 2) * (fib((n - 1) / 2 + 1) + fib((n - 1) / 2 - 1));
			}

			================= or ==================
			void fib(int n, int &x, int &y)
			{
			    if(n == 0)
			    {
			        x = 0;
			        y = 1;
			        return;
			    }
			     
			    if(n&1)
			    {
			        fib(n - 1, y, x);
			        y = y + x;
			    }
			    else
			    {
			        int a, b;
			        fib(n >> 1, a, b);
			        y = (a * a + b * b) % mod;
			        x = (a * b + a * (b - a + mod)) % mod;
			    }
			}
			// answer is x, just copied(don't have any proof)

6. ~x = -(x + 1)
   ~x = 1's complement of x(or inverting all the bits of x)
   -x = 2's complement of x(or inverting all the bits to the left of least significant set bit of x)

7. 